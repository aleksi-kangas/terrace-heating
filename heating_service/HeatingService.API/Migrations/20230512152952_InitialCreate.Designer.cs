// <auto-generated />
using System;
using HeatingService.API.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HeatingService.API.Migrations
{
    [DbContext(typeof(HeatingDbContext))]
    [Migration("20230512152952_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HeatingService.API.Domain.HeatPumpRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("HeatPumpRecords", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d743aa73-829f-4743-a699-f1ca7d578cc7"),
                            TimeStamp = new DateTime(2023, 5, 12, 15, 29, 52, 777, DateTimeKind.Utc).AddTicks(4947)
                        });
                });

            modelBuilder.Entity("HeatingService.API.Domain.HeatPumpRecord", b =>
                {
                    b.OwnsOne("HeatingService.API.Domain.TankLimits", "TankLimits", b1 =>
                        {
                            b1.Property<Guid>("HeatPumpRecordId")
                                .HasColumnType("uuid");

                            b1.Property<long>("LowerTankMaximum")
                                .HasColumnType("bigint");

                            b1.Property<long>("LowerTankMinimum")
                                .HasColumnType("bigint");

                            b1.Property<long>("UpperTankMaximum")
                                .HasColumnType("bigint");

                            b1.Property<long>("UpperTankMinimum")
                                .HasColumnType("bigint");

                            b1.HasKey("HeatPumpRecordId");

                            b1.ToTable("HeatPumpRecords");

                            b1.WithOwner()
                                .HasForeignKey("HeatPumpRecordId");

                            b1.HasData(
                                new
                                {
                                    HeatPumpRecordId = new Guid("d743aa73-829f-4743-a699-f1ca7d578cc7"),
                                    LowerTankMaximum = 50L,
                                    LowerTankMinimum = 40L,
                                    UpperTankMaximum = 51L,
                                    UpperTankMinimum = 41L
                                });
                        });

                    b.OwnsOne("HeatingService.API.Domain.Temperatures", "Temperatures", b1 =>
                        {
                            b1.Property<Guid>("HeatPumpRecordId")
                                .HasColumnType("uuid");

                            b1.Property<float>("Circuit1")
                                .HasColumnType("real");

                            b1.Property<float>("Circuit2")
                                .HasColumnType("real");

                            b1.Property<float>("Circuit3")
                                .HasColumnType("real");

                            b1.Property<float>("GroundInput")
                                .HasColumnType("real");

                            b1.Property<float>("GroundOutput")
                                .HasColumnType("real");

                            b1.Property<float>("HotGas")
                                .HasColumnType("real");

                            b1.Property<float>("Inside")
                                .HasColumnType("real");

                            b1.Property<float>("LowerTank")
                                .HasColumnType("real");

                            b1.Property<float>("Outside")
                                .HasColumnType("real");

                            b1.Property<float>("UpperTank")
                                .HasColumnType("real");

                            b1.HasKey("HeatPumpRecordId");

                            b1.ToTable("HeatPumpRecords");

                            b1.WithOwner()
                                .HasForeignKey("HeatPumpRecordId");

                            b1.HasData(
                                new
                                {
                                    HeatPumpRecordId = new Guid("d743aa73-829f-4743-a699-f1ca7d578cc7"),
                                    Circuit1 = 10f,
                                    Circuit2 = 20f,
                                    Circuit3 = 30f,
                                    GroundInput = 40f,
                                    GroundOutput = 50f,
                                    HotGas = 60f,
                                    Inside = 70f,
                                    LowerTank = 80f,
                                    Outside = 90f,
                                    UpperTank = 100f
                                });
                        });

                    b.Navigation("TankLimits")
                        .IsRequired();

                    b.Navigation("Temperatures")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
